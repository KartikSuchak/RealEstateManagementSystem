-- ===============================================
-- REAL ESTATE MANAGEMENT SYSTEM DATABASE SCRIPT
-- ===============================================

-- 1️⃣ USERS TABLE
CREATE TABLE users (
    user_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR2(50) NOT NULL UNIQUE,
    password_hash VARCHAR2(200) NOT NULL,
    full_name VARCHAR2(100),
    email VARCHAR2(100),
    phone VARCHAR2(20),
    role VARCHAR2(20),
    created_at DATE DEFAULT SYSDATE
);

-- 2️⃣ AGENTS TABLE
CREATE TABLE agents (
    agent_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER NOT NULL,
    license_no VARCHAR2(50),
    region VARCHAR2(100),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- 3️⃣ PROPERTIES TABLE
CREATE TABLE properties (
    property_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    agent_id NUMBER,
    title VARCHAR2(200) NOT NULL,
    description CLOB,
    city VARCHAR2(100),
    locality VARCHAR2(100),
    price NUMBER(14,2),
    property_type VARCHAR2(30),
    status VARCHAR2(20),
    created_at DATE DEFAULT SYSDATE,
    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)
);

-- 4️⃣ TENANTS TABLE
CREATE TABLE tenants (
    tenant_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER,
    name VARCHAR2(100) NOT NULL,
    phone VARCHAR2(20),
    email VARCHAR2(100),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- 5️⃣ AGREEMENTS TABLE
CREATE TABLE agreements (
    agreement_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    property_id NUMBER NOT NULL,
    tenant_id NUMBER NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    monthly_rent NUMBER(12,2),
    security_deposit NUMBER(12,2),
    created_at DATE DEFAULT SYSDATE,
    status VARCHAR2(20),
    FOREIGN KEY (property_id) REFERENCES properties(property_id),
    FOREIGN KEY (tenant_id) REFERENCES tenants(tenant_id)
);

-- 6️⃣ SALES TABLE
CREATE TABLE sales (
    sale_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    property_id NUMBER NOT NULL,
    buyer_id NUMBER NOT NULL,
    agent_id NUMBER NOT NULL,
    sale_price NUMBER(14,2),
    sale_date DATE,
    FOREIGN KEY (property_id) REFERENCES properties(property_id),
    FOREIGN KEY (buyer_id) REFERENCES users(user_id),
    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)
);

-- 7️⃣ COMMISSIONS TABLE
CREATE TABLE commissions (
    commission_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    sale_id NUMBER NOT NULL,
    agent_id NUMBER NOT NULL,
    commission_percent NUMBER(5,2),
    commission_amount NUMBER(14,2),
    paid_status VARCHAR2(20),
    created_at DATE DEFAULT SYSDATE,
    FOREIGN KEY (sale_id) REFERENCES sales(sale_id),
    FOREIGN KEY (agent_id) REFERENCES agents(agent_id)
);

-- 8️⃣ INQUIRIES TABLE
CREATE TABLE inquiries (
    inquiry_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    property_id NUMBER NOT NULL,
    buyer_id NUMBER NOT NULL,
    message VARCHAR2(1000),
    created_at DATE DEFAULT SYSDATE,
    status VARCHAR2(20),
    FOREIGN KEY (property_id) REFERENCES properties(property_id),
    FOREIGN KEY (buyer_id) REFERENCES users(user_id)
);


-- 9 PROPERTY LOGS TABLE
CREATE TABLE property_logs (
    log_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    property_id NUMBER NOT NULL,
    old_status VARCHAR2(20),
    new_status VARCHAR2(20),
    changed_at DATE DEFAULT SYSDATE,
    changed_by VARCHAR2(50)
);

-- ===============================================
-- SAMPLE DATA INSERTION
-- ===============================================

-- USERS
INSERT INTO users (username, password_hash, full_name, email, phone, role)
VALUES ('alice', 'hash1', 'Alice Johnson', 'alice@example.com', '1234567890', 'buyer');

INSERT INTO users (username, password_hash, full_name, email, phone, role)
VALUES ('bob', 'hash2', 'Bob Smith', 'bob@example.com', '2345678901', 'agent');

INSERT INTO users (username, password_hash, full_name, email, phone, role)
VALUES ('carol', 'hash3', 'Carol Admin', 'carol@example.com', '3456789012', 'admin');

-- AGENTS
INSERT INTO agents (user_id, license_no, region)
VALUES (2, 'LIC12345', 'Downtown');

-- PROPERTIES
INSERT INTO properties (agent_id, title, description, city, locality, price, property_type, status)
VALUES (1, 'Sunny Apartment', '2BHK apartment with parking', 'Nagpur', 'Central', 5000000, 'sale', 'available');

INSERT INTO properties (agent_id, title, description, city, locality, price, property_type, status)
VALUES (1, 'Cozy Studio', 'Studio apartment near park', 'Nagpur', 'West Side', 15000, 'rent', 'available');

-- TENANT
INSERT INTO tenants (user_id, name, phone, email)
VALUES (1, 'Alice Johnson', '1234567890', 'alice@example.com');

-- AGREEMENT
INSERT INTO agreements (property_id, tenant_id, start_date, end_date, monthly_rent, security_deposit, status)
VALUES (2, 1, TO_DATE('2025-10-01', 'YYYY-MM-DD'), TO_DATE('2026-09-30', 'YYYY-MM-DD'), 15000, 45000, 'active');

-- SALE
INSERT INTO sales (property_id, buyer_id, agent_id, sale_price, sale_date)
VALUES (1, 1, 1, 5000000, TO_DATE('2025-10-15', 'YYYY-MM-DD'));

-- COMMISSION
INSERT INTO commissions (sale_id, agent_id, commission_percent, commission_amount, paid_status)
VALUES (1, 1, 2, 100000, 'unpaid');

-- INQUIRY
INSERT INTO inquiries (property_id, buyer_id, message, status)
VALUES (1, 1, 'Is this apartment still available?', 'open');

--=====================================================================
--7 View: property + agent + agent-name + latest sale (if any)
CREATE OR REPLACE VIEW vw_property_agent_sale AS
SELECT
  p.property_id,
  p.title,
  p.city,
  p.locality,
  p.price,
  p.property_type,
  p.status,
  a.agent_id,
  u.full_name AS agent_name,
  s.sale_id,
  s.sale_price,
  s.sale_date
FROM properties p
LEFT JOIN agents a ON p.agent_id = a.agent_id
LEFT JOIN users u ON a.user_id = u.user_id
LEFT JOIN (
    -- If multiple sales exist for same property we pick the latest sale_date
    SELECT sale_id, property_id, sale_price, sale_date
    FROM (
        SELECT s.*, ROW_NUMBER() OVER (PARTITION BY property_id ORDER BY sale_date DESC) rn
        FROM sales s
    ) WHERE rn = 1
) s ON p.property_id = s.property_id;


